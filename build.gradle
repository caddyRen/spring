buildscript {
    ext {
        // 定义变量
        springCloudVersion = 'Hoxton.SR10'
        springBootVersion = '2.3.0.RELEASE'
        depManVersion = '1.0.11.RELEASE'
        asciidoctor = '1.5.8'
    }

    repositories {
        //优先使用maven本地仓库
        mavenLocal()
        mavenCentral()
    }

    dependencies {
        //用来 打包
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

plugins{
    id 'java'
    /**
     * api() 方法需要引入java-library
     * api=compile 依赖可以传递 compile说是要抛弃
     * implementation 依赖不能传递给下一层
     */
    id 'java-library'
    /**
     * org.springframework.boot
     * 默认打包 bootJar.enabled = true
     *         jar.enabled = false
     * bootJar会搜索springboot的main方法，build找不到会报错
     */
    id 'org.springframework.boot' version "${springBootVersion}" apply false
    id 'io.spring.dependency-management' version "${depManVersion}" apply false
    id 'org.asciidoctor.convert' version "${asciidoctor}" apply false
}

/**
 *  非jar包运行可以禁用jar
 *  springboot 默认使用bootJar 打jar包（jar默认禁用），bootJar会搜索main 方法 找不到会报错
 *  所以非springboot模块不要依赖springboot
 *  比如父项目设置 apply false： id 'org.springframework.boot' version "${springBootVersion}" apply false
 */

jar.enabled = false

allprojects {
    apply plugin: 'java'
    apply plugin: 'java-library'

    group = 'org.bougainvillea.spring'
    version = '0.0.1-SNAPSHOT'
    //全局java版本
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'

    compileTestJava.enabled = true
    processTestResources.enabled = true
    testClasses.enabled = true
    test.enabled = false

    //指定编码格式
    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }
    [compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

    repositories {
        //优先使用maven本地仓库
        mavenLocal()
        mavenCentral()
    }

}
// 子项目的公共配置及插件
subprojects {

    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'org.asciidoctor.convert'

    dependencies {
        compileOnlyApi 'org.projectlombok:lombok'

        testImplementation("org.springframework.boot:spring-boot-starter-test") {
            exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        }

        annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
        annotationProcessor 'org.projectlombok:lombok'
        testAnnotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
        testAnnotationProcessor 'org.projectlombok:lombok'
//        developmentOnly("org.springframework.boot:spring-boot-devtools")
    }
    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    ext {
        set('snippetsDir', file("build/generated-snippets"))
    }
    test {
        outputs.dir snippetsDir
        useJUnitPlatform()
    }

    asciidoctor {
        inputs.dir snippetsDir
        dependsOn test
    }

}