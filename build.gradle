buildscript {
    ext {
        // 定义变量
        springBootVersion = '2.4.1'
        depManVersion = '1.0.10.RELEASE'
        asciidoctor = '1.5.8'
//        springCloudVersion = '2020.0.2'
    }

    repositories {
        //优先使用maven本地仓库
        mavenLocal()
        mavenCentral()
    }

    dependencies {
        //用来 打包
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

plugins{
    id 'java'
/**
 *    api() 方法需要引入java-library
 *    api=compile 依赖可以传递 compile说是要抛弃
 *    implementation 依赖不能传递给下一层
 */
    id 'java-library'
    id 'org.springframework.boot' version "${springBootVersion}" apply false
    id 'io.spring.dependency-management' version "${depManVersion}" apply false
    id 'org.asciidoctor.convert' version "${asciidoctor}" apply false
}

group = 'org.bougainvillea.spring'
version = '0.0.1-SNAPSHOT'
//全局java版本
sourceCompatibility = '1.8'
targetCompatibility = '1.8'

/**
 *  非jar包运行可以禁用jar
 *  springboot 默认使用bootJar 打jar包（jar默认禁用），bootJar会搜索main 方法 找不到会报错
 *  所以非springboot模块不要依赖springboot
 *  比如父项目设置 apply false： id 'org.springframework.boot' version "${springBootVersion}" apply false
 */

allprojects {
    apply plugin: 'java'
    apply plugin: 'java-library'

    jar.enabled = false
    compileTestJava.enabled = false
    processTestResources.enabled = false
    testClasses.enabled = false
    test.enabled = false


    //指定编码格式
    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }
    [compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

    repositories {
        //优先使用maven本地仓库
        mavenLocal()
        mavenCentral()
    }

}
// 子项目的公共配置及插件
subprojects {
    //springboot和jar包管理,当包归io.spring.dependency-management管理时，模块间依赖会以io.spring.dependency-management版本为准
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'org.asciidoctor.convert'
    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    ext {
        set('snippetsDir', file("build/generated-snippets"))
    }

    dependencies {
        compileOnlyApi 'org.projectlombok:lombok'
        annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
        annotationProcessor 'org.projectlombok:lombok'
        testAnnotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
        testAnnotationProcessor 'org.projectlombok:lombok'
    }
    test {
        outputs.dir snippetsDir
        useJUnitPlatform()
    }

    asciidoctor {
        inputs.dir snippetsDir
        dependsOn test
    }
}