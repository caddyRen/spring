version=1.0.0-SNAPSHOT
# jvm参数
org.gradle.jvmargs=-Xmx2g -XX:MaxMetaspaceSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8

# 无需每次执行构建相关任务时都重新启动一个新的gradle进程，从而增加了相应的非必要耗时,gradle 3.0之后默认开启
# 长时间多次编译后速度变得缓慢，
# 通过命令行传递参数 ./gradlew --stop 结束已有daemon进程
org.gradle.daemon=true

# 基本上大部分项目都包含了多个module，gradle默认情况下是串行执行的，可以通过以下方式开启并行构建
# 可以加入参数 –profile 在生成的html中看到total build time 和 task execution的时间差异
# 命令行传递参数 ./gradlew --parallel
org.gradle.parallel=true

# configure on demand
# gradle的构建包含初始化、配置、执行三大流程，CoD用于配置阶段，仅配置与所选任务相关的module
# 例如module-A compile module-B，则B会被配置；或者task-A dependOn module-B‘s task 则B也会被配置
# 但是我们大部分情况是在IDE中执行的 sync 触发了配置所有module，因此CoD并没起什么作用。
# Gradle团队也决定废弃它，并计划通过一个新的模式来替代
# 命令行传递参数 ./gradlew --configure-on-demand
org.gradle.configureondemand=true

# 每次构建都会去下载本地缓存没有的依赖或检查缓存已有依赖是否存在最新版本
# 另外一些三方插件在构建期间也会发起网络请求，例如一些会上传匿名统计信息、一些会上传混淆的mapping文件等等。
# 但是由于国内的网络环境，网络经常超时重试占用大量构建时间
# 命令行传递参数 ./gradlew --offline

# gradle的构建缓存机制 会缓存构建的输出（build-in 和 符合的三方task），
# 并以输入作为参数生成唯一的key生成对应的缓存文件，这样在后续的构建过程中如果输入没有变化就可以直接利用这些缓存加快构建速度。
# 特别是clean之后重新构建时，实测有无缓存的时间相差将近 2/3
# 命令行传递参数 ./gradlew --build-cache 不使用缓存的参数 --no-build-cache
# 删除构建缓存 ./gradlew cleanBuildCache
# 生成的缓存默认存储在 <user-home>/.android/build-cache/ 可以通过以下方式进行修改或删除
# 与增量编译（incremental build）机制一个很明显的区别就是在构建的输出日志中，
# 增量编译的task之后显示的是 UP-TO-DATE ，而构建缓存显示的是 FROM-CACHE
org.gradle.caching=true

# --rerun-tasks 强制重新执行所有相关task并忽略任何task优化
# --build-cache
# --no-build-cache
# 相关命令参数
#./gradlew clean
#./gradlew --stop
#./gradlew --profile --offline --no-build-cache --rerun-tasks assembleXXX
